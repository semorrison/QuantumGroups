(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     35579,        885]*)
(*NotebookOutlinePosition[     36260,        908]*)
(*  CellTagsIndexPosition[     36216,        904]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["RepresentationTensors package", "Subtitle",
  InitializationCell->True],

Cell["\<\
A subpackage for QuantumGroups v2.
Version 2.0, June 22, 2006, Scott Morrison\
\>", "Text",
  InitializationCell->True],

Cell[CellGroupData[{

Cell["Introduction", "Section",
  InitializationCell->True],

Cell["", "Text",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation", "Section",
  InitializationCell->True],

Cell[CellGroupData[{

Cell["Start of package", "Subsection"],

Cell["Specify package dependencies:", "Text"],

Cell[BoxData[
    \(\(BeginPackage["\<QuantumGroups`RepresentationTensors`\>", \
{"\<QuantumGroups`\>", "\<LinearAlgebra`MatrixManipulation`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Utilities`Debugging`\>", "\<QuantumGroups`RootSystems`\>", "\
\<QuantumGroups`Algebra`\>", "\<QuantumGroups`Representations`\>", \
"\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`RMatrix`\>"}];\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage messages", "Subsection"],

Cell[BoxData[
    \(\(RepresentationTensor::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Domain::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Codomain::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(DomainBasis::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(CodomainBasis::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Algebra::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(IdentityMap::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(ZeroTensorQ::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(CheckRepresentationTensor::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(RepresentationTensorErrors;\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(QuantumTrace::usage = "\<\>";\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Distributor; Associator;\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(BraidingMap; NormalisedBraidingMap; 
    InverseNormalisedBraidingMap;\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DecompositionMap; InverseDecompositionMap;\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PermuteDirectSummands; DirectSumProjectionMap; 
    DirectSumInclusionMap;\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Internals", "Subsection"],

Cell[BoxData[
    \(\(Begin["\<`Private`\>"];\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Basic stuff", "Subsection",
  InitializationCell->True],

Cell[BoxData[{
    \(RepresentationTensor /: 
      Codomain[RepresentationTensor[_, V_, _, _, _, _]] := 
      V\), "\[IndentingNewLine]", 
    \(RepresentationTensor /: 
      Domain[RepresentationTensor[_, _, _, W_, _, _]] := W\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(RepresentationTensor /: 
      CodomainBasis[
        RepresentationTensor[_, _, \[Beta]_, _, _, _]] := \[Beta]\), "\
\[IndentingNewLine]", 
    \(RepresentationTensor /: 
      DomainBasis[
        RepresentationTensor[_, _, _, _, \[Beta]_, _]] := \[Beta]\)}], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: 
      Algebra[RepresentationTensor[\[CapitalGamma]_, _, _, _, _, _]] := \
\[CapitalGamma]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(IdentityMap[\[CapitalGamma]_, CircleTimes[], \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], \[DoubleStruckCapitalC], \[Beta], \
\[DoubleStruckCapitalC], \[Beta], {{ZeroVector[Rank[\[CapitalGamma]]], 
            identityMatrix[1]}}]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(IdentityMap[\[CapitalGamma]_, V_, \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], V, \[Beta], 
        V, \[Beta], \({#, 
              identityMatrix[WeightMultiplicity[\[CapitalGamma], V, #]]} &\) /@ 
          Weights[\[CapitalGamma], V]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(ZeroMap[\[CapitalGamma]_, V_, \[Beta]V_, W_, \[Beta]W_] := 
      RepresentationTensor[\[CapitalGamma], V, \[Beta]V, 
        W, \[Beta]W, \({#, 
              zeroMatrix[WeightMultiplicity[\[CapitalGamma], V, #], 
                WeightMultiplicity[\[CapitalGamma], W, #]]} &\) /@ 
          Weights[\[CapitalGamma], V]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(ZeroTensorQ[RepresentationTensor[_, _, _, _, _, matrices_]] := 
      And @@ \((\(ZeroMatrixQ[#\[LeftDoubleBracket]2\[RightDoubleBracket]] \
&\) /@ matrices)\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: 
      Together[RepresentationTensor[\[CapitalGamma]_, Vc_, \[Beta]c_, 
          Vd_, \[Beta]d_, data_]] := 
      RepresentationTensor[\[CapitalGamma], Vc, \[Beta]c, Vd, \[Beta]d, 
        Together[data]]\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Checking representation tensors", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(CheckRepresentationTensor[
        F : RepresentationTensor[\[CapitalGamma]_, Vc_, \[Beta]c_, 
            Vd_, \[Beta]d_, _], \[Lambda]_] := 
      And @@ \((\(DebugEcho[
                ZeroMatrixQ[
                  Simplify[\(\(MatrixPresentation[\[CapitalGamma]]\)[#]\)[
                          Vc, \[Beta]c, \[Lambda]] . F[\[Lambda]] - 
                      F[\[Lambda] + \(OperatorWeight[\[CapitalGamma]]\)[#]] . \
\(\(MatrixPresentation[\[CapitalGamma]]\)[#]\)[
                          Vd, \[Beta]d, \[Lambda]]]]] &\) /@ 
            Generators[\[CapitalGamma]])\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensorErrors[
        F : RepresentationTensor[\[CapitalGamma]_, Vc_, \[Beta]c_, 
            Vd_, \[Beta]d_, _], \[Lambda]_] := 
      DeleteCases[\({#, \(\(MatrixPresentation[\[CapitalGamma]]\)[#]\)[
                  Vc, \[Beta]c, \[Lambda]] . F[\[Lambda]], 
              F[\[Lambda] + \(OperatorWeight[\[CapitalGamma]]\)[#]] . \
\(\(MatrixPresentation[\[CapitalGamma]]\)[#]\)[Vd, \[Beta]d, \[Lambda]]} &\) /@ 
          Generators[\[CapitalGamma]], {_, a_, b_} /; 
          ZeroMatrixQ[Simplify[a - b]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(CheckRepresentationTensor[
        F : RepresentationTensor[\[CapitalGamma]_, _, _, V_, _, _]] := 
      And @@ \((\(CheckRepresentationTensor[F, #] &\) /@ 
            Weights[\[CapitalGamma], V])\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: \(RepresentationTensor[\[CapitalGamma]_, V_, _, 
          W_, _, matrices_]\)[\[Lambda]_] := \((Cases[
              matrices, {\[Lambda], m_Matrix} \[RuleDelayed] m]~
            Join~{ZeroesMatrix[
                WeightMultiplicity[\[CapitalGamma], V, \[Lambda]], 
                WeightMultiplicity[\[CapitalGamma], 
                  W, \[Lambda]]]})\)\[LeftDoubleBracket]1\[RightDoubleBracket]\
\)], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(RepresentationTensor /: 
      Plus[t__RepresentationTensor] /; \((SameQ[Codomain /@ {t}] \[And] 
            SameQ[Domain /@ {t}] \[And] SameQ[CodomainBasis /@ {t}] \[And] 
            SameQ[DomainBasis /@ {t}] \[And] SameQ[Algebra /@ {t}])\) := 
      Module[{t1, \[CapitalGamma], 
          domain, \[Lambda]}, \[IndentingNewLine]t1 = 
          First[{t}]; \[IndentingNewLine]\[CapitalGamma] = 
          Algebra[t1]; \[IndentingNewLine]domain = 
          Domain[t1]; \
\[IndentingNewLine]RepresentationTensor[\[CapitalGamma], Codomain[t1], 
          CodomainBasis[t1], Domain[t1], 
          DomainBasis[
            t1], \[IndentingNewLine]Table[\((\[Lambda] = \(Weights[\
\[CapitalGamma], domain]\)\[LeftDoubleBracket]
                  i\[RightDoubleBracket]; {\[Lambda], 
                Plus @@ \((\(#[\[Lambda]] &\) /@ {t})\)})\), {i, 1, 
              Length[Weights[\[CapitalGamma], 
                  domain]]}]]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\(General::"spell1"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(domain\\)\\\" is similar to existing symbol \
\\\"\\!\\(Domain\\)\\\". \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell1\\\"]\\)\"\>"}]], "Message",
  InitializationCell->True]
}, Open  ]],

Cell[BoxData[
    \(RepresentationTensor /: \[Alpha]_?
          qNumberQ\ RepresentationTensor[\[CapitalGamma]_, V1_, \[Beta]1_, 
          V2_, \[Beta]2_, matrices_List] := 
      RepresentationTensor[\[CapitalGamma], V1, \[Beta]1, 
        V2, \[Beta]2, \({#\[LeftDoubleBracket]1\[RightDoubleBracket], \
\[Alpha]\ #\[LeftDoubleBracket]2\[RightDoubleBracket]} &\) /@ 
          matrices]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: \((F : 
            RepresentationTensor[\[CapitalGamma]_, V1_, \[Beta]1_, 
              V2_, \[Beta]2_, _List])\) . \((G : 
            RepresentationTensor[\[CapitalGamma]_, V2_, \[Beta]2_, 
              V3_, \[Beta]3_, _List])\) := 
      RepresentationTensor[\[CapitalGamma], V1, \[Beta]1, 
        V3, \[Beta]3, \({#, 
              Together[F[#] . G[#]]} &\) /@ \(SortWeights[\[CapitalGamma]]\)[
            Union[Weights[\[CapitalGamma], V1]~Join~
                Weights[\[CapitalGamma], V3]]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: \((F : 
            RepresentationTensor[\[CapitalGamma]_, V3_, \[Beta]3_, 
              V2_, \[Beta]2_, _])\) . \((Gs : {RepresentationTensor[\
\[CapitalGamma]_, V2_, \[Beta]2_, V1_, \[Beta]1_, _] ... })\) := \(F . # &\) /@ 
        Gs\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: \((Fs : {RepresentationTensor[\[CapitalGamma]_, 
                  V3_, \[Beta]3_, V2_, \[Beta]2_, _] ... })\) . \((G : 
            RepresentationTensor[\[CapitalGamma]_, V2_, \[Beta]2_, 
              V1_, \[Beta]1_, _])\) := \(# . G &\) /@ Fs\)], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(RepresentationTensor /: \((F : 
            RepresentationTensor[\[CapitalGamma]_, V1_, \[Beta]c_, 
              V2_, \[Beta]d_, _])\)\[CircleTimes]\((G : 
            RepresentationTensor[\[CapitalGamma]_, V3_, \[Beta]c_, 
              V4_, \[Beta]d_, _])\) := 
      Module[{\[Lambda], \[Mu], codomain = V1\[CircleTimes]V3, 
          domain = V2\[CircleTimes]V4, productWeights, 
          rightWeights}, \[IndentingNewLine]productWeights = \(SortWeights[\
\[CapitalGamma]]\)[
            Union[Weights[\[CapitalGamma], domain]~Join~
                Weights[\[CapitalGamma], 
                  codomain]]]; \[IndentingNewLine]rightWeights = \
\(SortWeights[\[CapitalGamma]]\)[
            Union[Weights[\[CapitalGamma], V4]~Join~
                Weights[\[CapitalGamma], 
                  V3]]]; \[IndentingNewLine]RepresentationTensor[\
\[CapitalGamma], codomain, \[Beta]c, 
          domain, \[Beta]d, \[IndentingNewLine]Table[\[Lambda] = 
              productWeights\[LeftDoubleBracket]
                i\[RightDoubleBracket]; {\[Lambda], 
              BlockDiagonalMatrix @@ 
                Table[\[Mu] = 
                    rightWeights\[LeftDoubleBracket]j\[RightDoubleBracket]; 
                  Expand[KroneckerProduct[F[\[Lambda] - \[Mu]], 
                      G[\[Mu]]]], {j, 1, Length[rightWeights]}]}, {i, 1, 
              Length[productWeights]}]\[IndentingNewLine]]\[IndentingNewLine]]\
\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\(General::"spell1"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(codomain\\)\\\" is similar to existing \
symbol \\\"\\!\\(Codomain\\)\\\". \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell1\\\"]\\)\"\>"}]], "Message"],

Cell[BoxData[
    RowBox[{\(General::"spell1"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(domain\\)\\\" is similar to existing symbol \
\\\"\\!\\(Domain\\)\\\". \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell1\\\"]\\)\"\>"}]], "Message"]
}, Open  ]],

Cell[BoxData[
    \(RepresentationTensor /: \((F : 
            RepresentationTensor[\[CapitalGamma]_, V1_, \[Beta]c_, 
              V2_, \[Beta]d_, _])\)\[CirclePlus]\((G : 
            RepresentationTensor[\[CapitalGamma]_, V3_, \[Beta]c_, 
              V4_, \[Beta]d_, _])\) \
:= \[IndentingNewLine]\((DebugPrint["\<taking direct sums of tensors...\>"]; 
        RepresentationTensor[\[CapitalGamma], V1\[CirclePlus]V3, \[Beta]c, 
          V2\[CirclePlus]V4, \[Beta]d, \(With[{\[Lambda] = #}, 
                DebugPrint["\<... weight \>", \[Lambda]]; {\[Lambda], 
                  BlockDiagonalMatrix[F[\[Lambda]], G[\[Lambda]]]}] &\) /@ 
            Weights[\[CapitalGamma], V2\[CirclePlus]V4]])\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(RepresentationTensor /: 
      Inverse[RepresentationTensor[\[CapitalGamma]_, V1_, \[Beta]1_, 
          V2_, \[Beta]2_, matrices_]] := 
      RepresentationTensor[\[CapitalGamma], V2, \[Beta]2, 
        V1, \[Beta]1, \((\(PrepareInverse[#\[LeftDoubleBracket]2\
\[RightDoubleBracket]] &\) /@ 
            matrices; \({#\[LeftDoubleBracket]1\[RightDoubleBracket], 
                Inverse[#\[LeftDoubleBracket]2\[RightDoubleBracket]]} &\) /@ 
            matrices)\)]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(QuantumTrace[
        RepresentationTensor[\[CapitalGamma]_, V_, \[Beta]_, V_, \[Beta]_, 
          matrices_]] := 
      Simplify[\[Sum]\+\(i = \
1\)\%\(Length[matrices]\)Tr[\(\(MatrixPresentation[\[CapitalGamma]]\)[
                  K\_\(\[CapitalGamma], \[Rho]\)]\)[V, \[Beta], 
                matrices\[LeftDoubleBracket]i, 1\[RightDoubleBracket]] . 
              matrices\[LeftDoubleBracket]i, 
                2\[RightDoubleBracket]]]\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Associators", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(Associator[\[CapitalGamma]_, V1_, V2_, V3_, \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], \((V1\[CircleTimes]V2)\)\
\[CircleTimes]V3, \[Beta], 
        V1\[CircleTimes]\((V2\[CircleTimes]V3)\), \[Beta], \({#, 
              Associator[\[CapitalGamma], V1, V2, V3, \[Beta], #]} &\) /@ 
          Weights[\[CapitalGamma], 
            V1\[CircleTimes]\((V2\[CircleTimes]V3)\)]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Associator[\[CapitalGamma]_, U_, V_, W_, \[Beta]_, \[Lambda]_] := 
      LeftAssociator[\[CapitalGamma], U, V, W, \[Lambda]] . 
        Inverse[RightAssociator[\[CapitalGamma], U, V, 
            W, \[Lambda]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Okay . \ Let' 
        s\ write\ down\ the\ two\ maps\ U\_a\[CircleTimes]V\_b\[CircleTimes]W\
\_c \[Rule] \(U\_a\[CircleTimes]\((V\[CircleTimes]W)\)\_\(b + c\) \[Rule] \
\(\((U\[CircleTimes]\((V\[CircleTimes]W)\))\)\_\(a + b + c\)\ and\ U\_a\
\[CircleTimes]V\_b\[CircleTimes]W\_c \[Rule] \(\((U\[CircleTimes]V)\)\_\(a + \
b\)\[CircleTimes]W\_c \[Rule] \(\(\((\((U\[CircleTimes]V)\)\[CircleTimes]W)\)\
\_\(a + b + c\)\)\(.\)\)\)\)\)\)], "Text",
  InitializationCell->True],

Cell[BoxData[
    \(ConstituentWeights[\[CapitalGamma]_, V1_, V2_, V3_, \[Lambda]_] := 
      Select[Flatten[
          Outer[{\[Lambda] - #1 - #2, #2, #1} &, 
            Weights[\[CapitalGamma], V3], Weights[\[CapitalGamma], V2], 1], 
          1], MemberQ[
            Weights[\[CapitalGamma], 
              V1], #\[LeftDoubleBracket]1\[RightDoubleBracket]] &]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[{
    \(RightAssociatedWeightSpaceInclusion[\[CapitalGamma]_, {U_, V_, 
          W_}, {a_, b_, 
          c_}] := \[IndentingNewLine]TensorProductWeightSpaceInclusion[\
\[CapitalGamma], {U, V\[CircleTimes]W}, {a, b + c}] . 
        KroneckerProduct[
          identityMatrix[WeightMultiplicity[\[CapitalGamma], U, a]], 
          TensorProductWeightSpaceInclusion[\[CapitalGamma], {V, W}, {b, 
              c}]]\), "\[IndentingNewLine]", 
    \(LeftAssociatedWeightSpaceInclusion[\[CapitalGamma]_, {U_, V_, W_}, {a_, 
          b_, c_}] := \[IndentingNewLine]TensorProductWeightSpaceInclusion[\
\[CapitalGamma], {U\[CircleTimes]V, W}, {a + b, c}] . 
        KroneckerProduct[
          TensorProductWeightSpaceInclusion[\[CapitalGamma], {U, V}, {a, b}], 
          identityMatrix[
            WeightMultiplicity[\[CapitalGamma], W, c]]]\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(RightAssociator[\[CapitalGamma]_, U_, V_, W_, \[Lambda]_] := 
      AppendRows @@ \((\(RightAssociatedWeightSpaceInclusion[\[CapitalGamma], \
{U, V, W}, #] &\) /@ 
            ConstituentWeights[\[CapitalGamma], U, V, 
              W, \[Lambda]])\)\), "\[IndentingNewLine]", 
    \(LeftAssociator[\[CapitalGamma]_, U_, V_, W_, \[Lambda]_] := 
      AppendRows @@ \((\(LeftAssociatedWeightSpaceInclusion[\[CapitalGamma], \
{U, V, W}, #] &\) /@ 
            ConstituentWeights[\[CapitalGamma], U, V, 
              W, \[Lambda]])\)\)}], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Distributors", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(I\ want\ the\ map\ from\ \
\((\((V\_1\[CircleTimes]W)\)\[CirclePlus]\((V\_2\[CircleTimes]W)\))\)\_\
\[Lambda] = \(\(\[CirclePlus]\_i\(\[CirclePlus]\_\[Mu]\((V\_i)\)\_\(\[Lambda] \
- \[Mu]\)\[CircleTimes]W\_\[Mu]\ to\ \((\((V\_1\[CirclePlus]V\_2)\)\
\[CircleTimes]W)\)\_\[Lambda]\)\) = \
\(\[CirclePlus]\_\[Mu]\(\[CirclePlus]\_i\((V\_i)\)\_\(\[Lambda] - \[Mu]\)\
\[CircleTimes]\(\(W\_\[Mu]\)\(.\)\)\)\)\)\)], "Text",
  InitializationCell->True],

Cell[BoxData[
    \(\(targetIndexWeightPairs[\[CapitalGamma]_]\)[
        V_DirectSum\[CircleTimes]W_, \[Lambda]_] := 
      Flatten[Table[
          With[{\[Mu] = \(Weights[\[CapitalGamma], W]\)\[LeftDoubleBracket]
                  j\[RightDoubleBracket]}, 
            Table[Table[{i, \[Mu]}, {WeightMultiplicity[\[CapitalGamma], 
                      V\[LeftDoubleBracket]
                        i\[RightDoubleBracket], \[Lambda] - \[Mu]] 
                    WeightMultiplicity[\[CapitalGamma], W, \[Mu]]}], {i, 1, 
                Length[V]}]], {j, 1, Length[Weights[\[CapitalGamma], W]]}], 
        2]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(sourceIndexWeightPairs[\[CapitalGamma]_]\)[
        V_DirectSum\[CircleTimes]W_, \[Lambda]_] := 
      Flatten[Table[
          Table[With[{\[Mu] = \(Weights[\[CapitalGamma], 
                      W]\)\[LeftDoubleBracket]j\[RightDoubleBracket]}, 
              Table[{i, \[Mu]}, {WeightMultiplicity[\[CapitalGamma], 
                      V\[LeftDoubleBracket]
                        i\[RightDoubleBracket], \[Lambda] - \[Mu]] 
                    WeightMultiplicity[\[CapitalGamma], W, \[Mu]]}]], {j, 1, 
              Length[Weights[\[CapitalGamma], W]]}], {i, 1, Length[V]}], 
        2]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(distributorPermutation[\[CapitalGamma]_]\)[
        V_DirectSum\[CircleTimes]W_, \[Lambda]_] := 
      Ordering[\(Ordering[\(targetIndexWeightPairs[\[CapitalGamma]]\)[
              V\[CircleTimes]W, \[Lambda]]]\)\[LeftDoubleBracket]
          Ordering[\(sourceIndexWeightPairs[\[CapitalGamma]]\)[
              V\[CircleTimes]W, \[Lambda]]]\[RightDoubleBracket]]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(\(distributorPermutation[\[CapitalGamma]_]\)[
        V_DirectSum\[CircleTimes]W_, \[Lambda]_] := \
\(Ordering[\(sourceIndexWeightPairs[\[CapitalGamma]]\)[
            V\[CircleTimes]W, \[Lambda]]]\)\[LeftDoubleBracket]
        Ordering[
          Ordering[\(targetIndexWeightPairs[\[CapitalGamma]]\)[
              V\[CircleTimes]W, \[Lambda]]]]\[RightDoubleBracket]\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(\(Distributor[\[CapitalGamma]_]\)[
        V_DirectSum\[CircleTimes]W_, \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], 
        V\[CircleTimes]W, \[Beta], \(#\[CircleTimes]W &\) /@ 
          V, \[Beta], \({#, 
              Matrix[\(IdentityMatrix[
                    WeightMultiplicity[\[CapitalGamma], 
                      V\[CircleTimes]W, \
#]]\)\[LeftDoubleBracket]\(distributorPermutation[\[CapitalGamma]]\)[
                    V\[CircleTimes]W, #]\[RightDoubleBracket]]} &\) /@ 
          Weights[\[CapitalGamma], V\[CircleTimes]W]]\)], "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Braidings", "Subsection",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(BraidingMap[\[CapitalGamma]_, 
        V_\[CircleTimes]W_, \[Beta]_] := \(BraidingMap[\[CapitalGamma], 
          V\[CircleTimes]W, \[Beta]] = \
\[IndentingNewLine]RepresentationTensor[\[CapitalGamma], 
          W\[CircleTimes]V, \[Beta], 
          V\[CircleTimes]W, \[Beta], \({#, 
                SwitchTensorProductWeightSpace[\[CapitalGamma], 
                    V\[CircleTimes]W, #] . 
                  RMatrix[\[CapitalGamma], V, W, \[Beta], #]} &\) /@ 
            Weights[\[CapitalGamma], V\[CircleTimes]W]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\(General::"spell1"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(RMatrix\\)\\\" is similar to existing symbol \
\\\"\\!\\(Matrix\\)\\\". \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell1\\\"]\\)\"\>"}]], "Message",
  InitializationCell->True]
}, Open  ]],

Cell[BoxData[
    \(NormalisedBraidingMap[\[CapitalGamma]_, 
        V_\[CircleTimes]V_, \[Beta]_] := \(NormalisedBraidingMap[\
\[CapitalGamma], V\[CircleTimes]V, \[Beta]] = 
        With[{b = 
              BraidingMap[\[CapitalGamma], 
                V\[CircleTimes]V, \[Beta]]}, \
\[IndentingNewLine]Simplify[\(qDimension[\[CapitalGamma]]\)[V]\/QuantumTrace[\
b]] b\[IndentingNewLine]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(NormalisedBraidingMap[\[CapitalGamma]_, V_\[CircleTimes]W_, \[Beta]_] := 
      BraidingMap[\[CapitalGamma], V\[CircleTimes]W, \[Beta]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(InverseNormalisedBraidingMap[\[CapitalGamma]_, 
        V_\[CircleTimes]W_, \[Beta]_] := \(InverseNormalisedBraidingMap[\
\[CapitalGamma], V\[CircleTimes]W, \[Beta]] = 
        Inverse[NormalisedBraidingMap[\[CapitalGamma], 
            V\[CircleTimes]W, \[Beta]]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(SwitchTensorProductWeightSpace[\[CapitalGamma]_, 
        V_\[CircleTimes]W_, \[Lambda] : {__Integer}] := \[Sum]\+\(i = \
1\)\%\(Length[Weights[\[CapitalGamma], \
W]]\)TensorProductWeightSpaceInclusion[\[CapitalGamma], {W, 
              V}, {\(Weights[\[CapitalGamma], W]\)\[LeftDoubleBracket]
                i\[RightDoubleBracket], \[Lambda] - \
\(Weights[\[CapitalGamma], W]\)\[LeftDoubleBracket]i\[RightDoubleBracket]}] . 
          SwitchTensorProduct[
            WeightMultiplicity[\[CapitalGamma], 
              V, \[Lambda] - \(Weights[\[CapitalGamma], 
                    W]\)\[LeftDoubleBracket]i\[RightDoubleBracket]], 
            WeightMultiplicity[\[CapitalGamma], 
              W, \(Weights[\[CapitalGamma], W]\)\[LeftDoubleBracket]
                i\[RightDoubleBracket]]] . 
          Transpose[
            TensorProductWeightSpaceInclusion[\[CapitalGamma], {V, 
                W}, {\[Lambda] - \(Weights[\[CapitalGamma], 
                      W]\)\[LeftDoubleBracket]
                    i\[RightDoubleBracket], \(Weights[\[CapitalGamma], 
                    W]\)\[LeftDoubleBracket]
                  i\[RightDoubleBracket]}]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(SwitchTensorProduct[d1_Integer, d2_Integer] := 
      Matrix[d1\ d2, 
        d1\ d2, \(UnitVector[d1\ d2, #] &\) /@ 
          Ordering[
            Flatten[Table[{j, i}, {i, 1, d1}, {j, 1, d2}], 1]]]\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Decomposition tensors", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(\(HighWeightVectors[\[CapitalGamma]_]\)[\((U_\[CircleTimes]V_)\)\
\[CircleTimes]W_, \[Beta]_, \[Lambda]_] := \(\(HighWeightVectors[\
\[CapitalGamma]]\)[\((U\[CircleTimes]V)\)\[CircleTimes]W, \[Beta], \[Lambda]] \
= Module[{irreps, decomposition, inclusions, 
            result}, \[IndentingNewLine]DebugPrintHeld["\<Calculating \>", \
\(HighWeightVectors[\[CapitalGamma]]\)[\((U\[CircleTimes]V)\)\[CircleTimes]W, \
\[Beta], \[Lambda]], "\< (iterated tensor product)\>"]; \
\[IndentingNewLine]irreps = \(DecomposeRepresentation[\[CapitalGamma]]\)[
              U\[CircleTimes]V]; \[IndentingNewLine]decomposition = 
            DecompositionMap[\[CapitalGamma], 
                U\[CircleTimes]V, \[Beta]]\[CircleTimes]IdentityMap[\
\[CapitalGamma], 
                W, \[Beta]]; \[IndentingNewLine]DebugPrintHeld["\<Calculated \
decomposition map...\>"]; \[IndentingNewLine]inclusions = 
            Table[DirectSumInclusionMap[\[CapitalGamma], irreps, 
                  i, \[Beta]]\[CircleTimes]IdentityMap[\[CapitalGamma], 
                  W, \[Beta]], {i, 1, 
                Length[irreps]}]; \[IndentingNewLine]result = 
            Flatten[Table[\[IndentingNewLine]\(decomposition[\[Lambda]] . \
\(inclusions\[LeftDoubleBracket]
                          i\[RightDoubleBracket]\)[\[Lambda]] . # &\) /@ \
\(HighWeightVectors[\[CapitalGamma]]\)[
                    irreps\[LeftDoubleBracket]
                        i\[RightDoubleBracket]\[CircleTimes]W, \[Beta], \
\[Lambda]], \[IndentingNewLine]{i, 1, Length[irreps]}\[IndentingNewLine]], 
              1]; \[IndentingNewLine]DebugPrintHeld["\<Finished calculating \
\>", \(HighWeightVectors[\[CapitalGamma]]\)[\((U\[CircleTimes]V)\)\
\[CircleTimes]W, \[Beta], \[Lambda]], "\< (iterated tensor product)\>"]; \
\[IndentingNewLine]result\[IndentingNewLine]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DecompositionMap[\[CapitalGamma]_, \
\(Irrep[\[CapitalGamma]_]\)[\[Lambda]_], \[Beta]_] := 
      IdentityMap[\[CapitalGamma], \(Irrep[\[CapitalGamma]]\)[\[Lambda]], \
\[Beta]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DecompositionMap[\[CapitalGamma]_, 
        V : DirectSum[\(Irrep[\[CapitalGamma]_]\)[_] .. ], \[Beta]_] := 
      Inverse[\(PermuteDirectSummands[\[CapitalGamma]]\)[
          V, \[Beta], \(Ordering[V]\)\[LeftDoubleBracket]
            Ordering[
              Ordering[\(SortWeights[\[CapitalGamma]]\)[
                  V]]]\[RightDoubleBracket]]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DecompositionMap[\[CapitalGamma]_, 
        V_\[CircleTimes]W_, \[Beta]_] := \(DecompositionMap[\[CapitalGamma], 
          V\[CircleTimes]W, \[Beta]] = \[IndentingNewLine]\((DebugPrint[
            DecompositionMap, \ \[CapitalGamma], V, W]; 
          RepresentationTensor[\[CapitalGamma], 
            V\[CircleTimes]W, \[Beta], \(DecomposeRepresentation[\
\[CapitalGamma]]\)[
              V\[CircleTimes]W], \[Beta], \({#, \((DebugPrint["\< ... weight \
\>", #]; \(QuantumGroups`MatrixPresentations`Private`DirectSumDecomposition[\
\[CapitalGamma]]\)[V\[CircleTimes]W, \[Beta], #])\)} &\) /@ 
              Reverse[Weights[\[CapitalGamma], 
                  V\[CircleTimes]W]]])\)\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DecompositionMap[\[CapitalGamma]_, \((U_\[CircleTimes]V_)\)\
\[CircleTimes]W_, \[Beta]_] := \(DecompositionMap[\[CapitalGamma], \((U\
\[CircleTimes]V)\)\[CircleTimes]W, \[Beta]] = 
        With[{Z = \(DecomposeRepresentation[\[CapitalGamma]]\)[
                U\[CircleTimes]V]}, \[IndentingNewLine]Module[{distributor, 
              firstDecomposition, summandDecompositions, disordered, domain, 
              disordering, 
              result}, \[IndentingNewLine]DebugPrintHeld["\<Beginning \>", 
              DecompositionMap[\[CapitalGamma], \((U\[CircleTimes]V)\)\
\[CircleTimes]W, \[Beta]]]; \[IndentingNewLine]distributor = \(Distributor[\
\[CapitalGamma]]\)[
                Z\[CircleTimes]W, \[Beta]]; \
\[IndentingNewLine]DebugPrint["\<...prepared distributor\>"]; \
\[IndentingNewLine]firstDecomposition = 
              DecompositionMap[\[CapitalGamma], 
                U\[CircleTimes]V, \[Beta]]; \
\[IndentingNewLine]DebugPrint["\<...prepared first decomposition map\>"]; \
\[IndentingNewLine]summandDecompositions = \((\(DecompositionMap[\
\[CapitalGamma], #\[CircleTimes]W, \[Beta]] &\) /@ 
                  Z)\); \[IndentingNewLine]DebugPrint["\<...prepared all \
decomposition maps\>"]; \[IndentingNewLine]disordered = \((firstDecomposition\
\[CircleTimes]IdentityMap[\[CapitalGamma], W, \[Beta]])\) . distributor . 
                summandDecompositions; \[IndentingNewLine]DebugPrint["\<... \
calculated the composition\>"]; \[IndentingNewLine]domain = 
              Domain[disordered]; \[IndentingNewLine]disordering = \(Ordering[
                  domain]\)\[LeftDoubleBracket]
                Ordering[
                  Ordering[\(SortWeights[\[CapitalGamma]]\)[
                      domain]]]\[RightDoubleBracket]; \
\[IndentingNewLine]DebugPrint["\<... permuting bases\>"]; \
\[IndentingNewLine]result = 
              disordered . \(PermuteDirectSummands[\[CapitalGamma]]\)[
                  domain\[LeftDoubleBracket]
                    disordering\[RightDoubleBracket], \[Beta], 
                  Ordering[
                    disordering]]; \
\[IndentingNewLine]DebugPrintHeld["\<Finished \>", 
              DecompositionMap[\[CapitalGamma], \((U\[CircleTimes]V)\)\
\[CircleTimes]W, \[Beta]]]; \[IndentingNewLine]result\[IndentingNewLine]]\
\[IndentingNewLine]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(InverseDecompositionMap[\[CapitalGamma]_, 
        V : \(Irrep[_]\)[_], \[Beta]_] := 
      Inverse[DecompositionMap[\[CapitalGamma], 
          V, \[Beta]]]\), "\[IndentingNewLine]", 
    \(InverseDecompositionMap[\[CapitalGamma]_, 
        V : \((_\[CirclePlus]_)\), \[Beta]_] := 
      Inverse[DecompositionMap[\[CapitalGamma], V, \[Beta]]]\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(InverseDecompositionMap[\[CapitalGamma]_, 
        V : \((_\[CircleTimes]_)\), \[Beta]_] := \(InverseDecompositionMap[\
\[CapitalGamma], 
          V, \[Beta]] = \[IndentingNewLine]Module[{result}, \
\[IndentingNewLine]DebugPrintHeld["\<Beginning \>", 
            InverseDecompositionMap[\[CapitalGamma], 
              V, \[Beta]]]; \[IndentingNewLine]result = 
            Inverse[DecompositionMap[\[CapitalGamma], 
                V, \[Beta]]]; \[IndentingNewLine]DebugPrintHeld["\<Finished \
\>", InverseDecompositionMap[\[CapitalGamma], 
              V, \[Beta]]]; \
\[IndentingNewLine]result\[IndentingNewLine]]\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(BlockPermutationMatrix[permutation : {__Integer}, 
        blocksizes : {__Integer}] := \[IndentingNewLine]BlockMatrix[
        Table[Table[
            If[permutation\[LeftDoubleBracket]j\[RightDoubleBracket] \[Equal] 
                i, identityMatrix[
                blocksizes\[LeftDoubleBracket]i\[RightDoubleBracket]], 
              ZeroesMatrix[
                blocksizes\[LeftDoubleBracket]
                  permutation\[LeftDoubleBracket]
                    j\[RightDoubleBracket]\[RightDoubleBracket], 
                blocksizes\[LeftDoubleBracket]i\[RightDoubleBracket]]], {i, 
              1, Length[blocksizes]}], {j, 1, 
            Length[permutation]}]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(PermuteDirectSummands[\[CapitalGamma]_]\)[V_DirectSum, \[Beta]_, p_] := 
      RepresentationTensor[\[CapitalGamma], 
        V\[LeftDoubleBracket]p\[RightDoubleBracket], \[Beta], 
        V, \[Beta], \({#, 
              BlockPermutationMatrix[p, 
                Function[{W}, 
                    WeightMultiplicity[\[CapitalGamma], W, #]] /@ \((List @@ 
                      V)\)]} &\) /@ Weights[\[CapitalGamma], V]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(DirectSumProjectionMap[\[CapitalGamma]_, V_DirectSum, k_, \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], 
        V\[LeftDoubleBracket]k\[RightDoubleBracket], \[Beta], 
        V, \[Beta], \({#, \
\(QuantumGroups`MatrixPresentations`Private`DirectSumProjection[\
\[CapitalGamma]]\)[V, k, #]} &\) /@ 
          Weights[\[CapitalGamma], V]]\), "\[IndentingNewLine]", 
    \(DirectSumInclusionMap[\[CapitalGamma]_, V_DirectSum, k_, \[Beta]_] := 
      RepresentationTensor[\[CapitalGamma], V, \[Beta], 
        V\[LeftDoubleBracket]
          k\[RightDoubleBracket], \[Beta], \({#, \
\(QuantumGroups`MatrixPresentations`Private`DirectSumInclusion[\[CapitalGamma]\
]\)[V, k, #]} &\) /@ Weights[\[CapitalGamma], V]]\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(End[];\)\)], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["End of package", "Subsection"],

Cell[BoxData[
    \(\(EndPackage[];\)\)], "Input",
  InitializationCell->True]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
FrontEndVersion->"5.2 for Microsoft Windows",
ScreenRectangle->{{0, 1280}, {0, 713}},
AutoGeneratedPackage->Automatic,
WindowSize->{1272, 706},
WindowMargins->{{1273, Automatic}, {79, Automatic}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 77, 1, 51, "Subtitle",
  InitializationCell->True],
Cell[1856, 56, 129, 4, 52, "Text",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[2010, 64, 59, 1, 73, "Section",
  InitializationCell->True],
Cell[2072, 67, 44, 1, 33, "Text",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[2153, 73, 61, 1, 73, "Section",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[2239, 78, 38, 0, 38, "Subsection"],
Cell[2280, 80, 45, 0, 33, "Text"],
Cell[2328, 82, 461, 8, 70, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[2826, 95, 36, 0, 38, "Subsection"],
Cell[2865, 97, 102, 2, 30, "Input",
  InitializationCell->True],
Cell[2970, 101, 88, 2, 30, "Input",
  InitializationCell->True],
Cell[3061, 105, 90, 2, 30, "Input",
  InitializationCell->True],
Cell[3154, 109, 93, 2, 30, "Input",
  InitializationCell->True],
Cell[3250, 113, 95, 2, 30, "Input",
  InitializationCell->True],
Cell[3348, 117, 89, 2, 30, "Input",
  InitializationCell->True],
Cell[3440, 121, 93, 2, 30, "Input",
  InitializationCell->True],
Cell[3536, 125, 93, 2, 30, "Input",
  InitializationCell->True],
Cell[3632, 129, 107, 2, 30, "Input",
  InitializationCell->True],
Cell[3742, 133, 92, 2, 30, "Input",
  InitializationCell->True],
Cell[3837, 137, 94, 2, 30, "Input",
  InitializationCell->True],
Cell[3934, 141, 85, 2, 30, "Input",
  InitializationCell->True],
Cell[4022, 145, 131, 3, 30, "Input",
  InitializationCell->True],
Cell[4156, 150, 103, 2, 30, "Input",
  InitializationCell->True],
Cell[4262, 154, 135, 3, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[4434, 162, 31, 0, 38, "Subsection"],
Cell[4468, 164, 88, 2, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[4593, 171, 61, 1, 38, "Subsection",
  InitializationCell->True],
Cell[4657, 174, 272, 6, 50, "Input",
  InitializationCell->True],
Cell[4932, 182, 321, 9, 50, "Input",
  InitializationCell->True],
Cell[5256, 193, 175, 4, 30, "Input",
  InitializationCell->True],
Cell[5434, 199, 304, 5, 30, "Input",
  InitializationCell->True],
Cell[5741, 206, 312, 6, 30, "Input",
  InitializationCell->True],
Cell[6056, 214, 382, 7, 30, "Input",
  InitializationCell->True],
Cell[6441, 223, 220, 4, 30, "Input",
  InitializationCell->True],
Cell[6664, 229, 291, 6, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[6992, 240, 81, 1, 38, "Subsection",
  InitializationCell->True],
Cell[7076, 243, 638, 12, 50, "Input",
  InitializationCell->True],
Cell[7717, 257, 584, 10, 70, "Input",
  InitializationCell->True],
Cell[8304, 269, 260, 5, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[8601, 279, 60, 1, 38, "Subsection",
  InitializationCell->True],
Cell[8664, 282, 487, 9, 50, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[9176, 295, 1009, 19, 190, "Input",
  InitializationCell->True],
Cell[10188, 316, 388, 6, 22, "Message",
  InitializationCell->True]
}, Open  ]],
Cell[10591, 325, 430, 8, 30, "Input",
  InitializationCell->True],
Cell[11024, 335, 589, 11, 50, "Input",
  InitializationCell->True],
Cell[11616, 348, 322, 6, 30, "Input",
  InitializationCell->True],
Cell[11941, 356, 330, 5, 30, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[12296, 365, 1476, 28, 190, "Input",
  InitializationCell->True],
Cell[13775, 395, 364, 5, 22, "Message"],
Cell[14142, 402, 360, 5, 22, "Message"]
}, Open  ]],
Cell[14517, 410, 747, 12, 70, "Input",
  InitializationCell->True],
Cell[15267, 424, 527, 10, 50, "Input",
  InitializationCell->True],
Cell[15797, 436, 504, 10, 52, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[16338, 451, 61, 1, 38, "Subsection",
  InitializationCell->True],
Cell[16402, 454, 448, 8, 30, "Input",
  InitializationCell->True],
Cell[16853, 464, 271, 5, 30, "Input",
  InitializationCell->True],
Cell[17127, 471, 491, 8, 32, "Text",
  InitializationCell->True],
Cell[17621, 481, 407, 9, 30, "Input",
  InitializationCell->True],
Cell[18031, 492, 893, 16, 130, "Input",
  InitializationCell->True],
Cell[18927, 510, 593, 11, 50, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[19557, 526, 62, 1, 38, "Subsection",
  InitializationCell->True],
Cell[19622, 529, 463, 8, 53, "Text",
  InitializationCell->True],
Cell[20088, 539, 651, 12, 130, "Input",
  InitializationCell->True],
Cell[20742, 553, 655, 12, 150, "Input",
  InitializationCell->True],
Cell[21400, 567, 428, 8, 70, "Input",
  InitializationCell->True],
Cell[21831, 577, 430, 9, 70, "Input",
  InitializationCell->True],
Cell[22264, 588, 616, 12, 90, "Input",
  InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{
Cell[22917, 605, 59, 1, 30, "Subsection",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[23001, 610, 582, 11, 50, "Input",
  InitializationCell->True],
Cell[23586, 623, 389, 6, 22, "Message",
  InitializationCell->True]
}, Open  ]],
Cell[23990, 632, 432, 9, 88, "Input",
  InitializationCell->True],
Cell[24425, 643, 196, 3, 30, "Input",
  InitializationCell->True],
Cell[24624, 648, 327, 6, 30, "Input",
  InitializationCell->True],
Cell[24954, 656, 1215, 22, 116, "Input",
  InitializationCell->True],
Cell[26172, 680, 262, 6, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[26471, 691, 71, 1, 38, "Subsection",
  InitializationCell->True],
Cell[26545, 694, 1881, 30, 270, "Input",
  InitializationCell->True],
Cell[28429, 726, 237, 5, 30, "Input",
  InitializationCell->True],
Cell[28669, 733, 410, 8, 30, "Input",
  InitializationCell->True],
Cell[29082, 743, 749, 13, 70, "Input",
  InitializationCell->True],
Cell[29834, 758, 2368, 41, 390, "Input",
  InitializationCell->True],
Cell[32205, 801, 406, 8, 50, "Input",
  InitializationCell->True],
Cell[32614, 811, 682, 13, 150, "Input",
  InitializationCell->True],
Cell[33299, 826, 737, 14, 70, "Input",
  InitializationCell->True],
Cell[34039, 842, 485, 9, 50, "Input",
  InitializationCell->True],
Cell[34527, 853, 784, 14, 90, "Input",
  InitializationCell->True],
Cell[35314, 869, 71, 2, 30, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[35422, 876, 36, 0, 38, "Subsection"],
Cell[35461, 878, 78, 2, 30, "Input",
  InitializationCell->True]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

