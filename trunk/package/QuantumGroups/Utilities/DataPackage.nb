(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     21171,        453]*)
(*NotebookOutlinePosition[     21852,        476]*)
(*  CellTagsIndexPosition[     21808,        472]*)
(*WindowFrame->Normal*)



Notebook[{
Cell[BoxData[
    \(\(BeginPackage["\<QuantumGroups`Utilities`DataPackage`\>", \
{"\<QuantumGroups`\>", "\<QuantumGroups`Utilities`Debugging`\>", \
"\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`RepresentationTensors`\>", "\<QuantumGroups`Representations`\
\>", "\<QuantumGroups`Algebra`\>"}];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(ValuesAsString; PackageData; MatchingValues; DefiniteValues;\)], "Input",\

  InitializationCell->True],

Cell[BoxData[
    \(\({PackageMatrixPresentations, PackageDecompositionMaps, 
        PackageQuantumRoots, PackageRMatrix, 
        PackagePartialRMatrixPresentation, PackageDirectSumDecompositions, 
        PackageHighWeightVectors, PackageSubIrrepWeightBases, 
        PackageBraidingMatrices, PackageBRPresentations, 
        PackageBraidingMaps};\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(Begin["\<`Private`\>"];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DefiniteValues[s_Symbol] := 
      Cases[DownValues[s]~Join~SubValues[s], 
        rule : \((pattern_ /; 
                  FreeQ[pattern, Blank] \[RuleDelayed] _)\) \[RuleDelayed] 
          rule]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(MatchingValues[s_Symbol, p_] := 
      Cases[DownValues[s]~Join~SubValues[s], 
        rule : \((pattern_ /; 
                  MatchQ[pattern /. HoldPattern \[Rule] Hold, 
                    Hold[p]] \[RuleDelayed] _)\) \[RuleDelayed] 
          rule]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(ConvertRuleToAssignmentString[a_HoldPattern \[RuleDelayed] b_] := 
      StringTake[
          ToString[a, InputForm, 
            CharacterEncoding \[Rule] "\<PrintableASCII\>"], {13, \(-2\)}] <> \
"\<:=\>" <> 
        ToString[b, InputForm, 
          CharacterEncoding \[Rule] "\<PrintableASCII\>"] <> "\<\n\>"\)], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(ValuesAsString[s_Symbol, p_] := 
      StringJoin @@ \((ConvertRuleToAssignmentString /@ 
            MatchingValues[s, p])\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(WriteRule[filename_, 
        a_HoldPattern \[RuleDelayed] b_] := \[IndentingNewLine]\((WriteString[
          filename, 
          StringTake[
              ToString[a, InputForm, 
                CharacterEncoding \[Rule] "\<PrintableASCII\>"], {13, \
\(-2\)}] <> "\<:=\>"]; \[IndentingNewLine]CautiousWriteString[filename, b, 
          InputForm, 
          CharacterEncoding \[Rule] "\<PrintableASCII\>"]; \
\[IndentingNewLine]WriteString[filename, "\<\n\>"];)\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(CautiousWriteString[filename_, s_Symbol, options___] := 
      WriteString[filename, ToString[s, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, s_String, options___] := 
      WriteString[filename, s]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, s_Integer, options___] := 
      WriteString[filename, ToString[s, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, s_Real, options___] := 
      WriteString[filename, ToString[s, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, x_Plus, options___] := 
      WriteString[filename, ToString[x, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, x_Times, options___] := 
      WriteString[filename, ToString[x, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, x_TensorProduct, options___] := 
      WriteString[filename, ToString[x, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, x_CircleTimes, options___] := 
      WriteString[filename, ToString[x, options]]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, {}, options___] := 
      WriteString[filename, "\<{}\>"]\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, {x__}, 
        options___] := \[IndentingNewLine]\((WriteString[
          filename, "\<{\>"]; \[IndentingNewLine]\(\((CautiousWriteString[
                filename, #, options]; 
              WriteString[filename, "\<, \>"])\) &\) /@ 
          Most[{x}]; \[IndentingNewLine]CautiousWriteString[filename, 
          Last[{x}], options]; \[IndentingNewLine]WriteString[
          filename, "\<}\>"];)\)\), "\[IndentingNewLine]", 
    \(CautiousWriteString[filename_, f_[x___], 
        options___] := \[IndentingNewLine]\((WriteString[filename, 
          ToString[f, options]]; 
        WriteString[
          filename, "\<[\>"]; \[IndentingNewLine]\(\((CautiousWriteString[
                filename, #, options]; 
              WriteString[filename, "\<, \>"])\) &\) /@ 
          Most[{x}]; \[IndentingNewLine]CautiousWriteString[filename, 
          Last[{x}], options]; \[IndentingNewLine]WriteString[
          filename, "\<]\>"];)\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(\(Options[
          PackageData] = {"\<Needs\>" \[Rule] {}, "\<ExtraPackageCode\>" \
\[Rule] "\<\>", "\<ExtraPrivateCode\>" \[Rule] "\<\>", \
"\<LoadPreexistingPackage\>" \[Rule] 
            True, "\<Message\>" \[Rule] "\<QuantumGroups::loading\>", \
"\<UseGzip\>" \[Rule] False};\)\), "\[IndentingNewLine]", 
    \(PackageData[s_Symbol, p_, packagePath : {__String}, opts___] := 
      PackageData[{{s, p}}, QuantumGroupsDataDirectory[], packagePath, 
        opts]\), "\n", 
    \(PackageData[s_Symbol, p_, baseDirectory_String, 
        packagePath : {__String}, opts___] := 
      PackageData[{{s, p}}, baseDirectory, packagePath, opts]\), "\n", 
    \(PackageData[patterns : {{_Symbol, _} .. }, packagePath : {__String}, 
        opts___] := 
      PackageData[patterns, QuantumGroupsDataDirectory[], packagePath, 
        opts]\), "\[IndentingNewLine]", 
    \(PackageData[patterns : {{_Symbol, _} .. }, baseDirectory_String, 
        packagePath : {__String}, opts___] := 
      Module[{fullPackagePath, package, directory, filename, contentsTop, \ 
          contentsBottom, needs, extraPackageCode, extraPrivateCode, 
          loadPreexistingPackage, message, useGzip}, 
        needs = \("\<Needs\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]extraPackageCode = \
\("\<ExtraPackageCode\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]extraPrivateCode = \
\("\<ExtraPrivateCode\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]loadPreexistingPackage = \
\("\<LoadPreexistingPackage\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]message = \
\("\<Message\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]useGzip = \
\("\<UseGzip\>" /. {opts}\) /. 
            Options[PackageData]; \[IndentingNewLine]SetDirectory[
          baseDirectory]; \[IndentingNewLine]fullPackagePath = \
{"\<QuantumGroups\>", "\<Data\>"}~Join~
            packagePath; \[IndentingNewLine]directory = 
          ToFileName[Most[fullPackagePath]]; \[IndentingNewLine]If[
          Length[FileNames[
                fullPackagePath\[LeftDoubleBracket]\(-2\)\[RightDoubleBracket]\
, ToFileName[Drop[fullPackagePath, \(-2\)]]]] \[Equal] 0, 
          CreateDirectory[directory]]; \[IndentingNewLine]package = 
          StringJoin @@ \((Flatten[
                Transpose[{fullPackagePath, 
                    Table["\<`\>", {Length[fullPackagePath]}]}], 
                1])\); \[IndentingNewLine]filename = 
          ToFileName[Most[fullPackagePath], 
            Last[fullPackagePath] <> "\<.m\>"]; \[IndentingNewLine]If[
          loadPreexistingPackage \[And] \(! MemberQ[$ContextPath, 
                package]\), \[IndentingNewLine]If[
            useGzip \[And] Length[FileNames[filename]] \[Equal] 0 \[And] 
              Length[FileNames[filename <> "\<.gz\>"]] \[NotEqual] 
                0, \[IndentingNewLine]SetDirectory[
              directory]; \[IndentingNewLine]Run["\<gzip -d \>" <> 
                Last[fullPackagePath] <> "\<.m.gz\>"]; \
\[IndentingNewLine]ResetDirectory[]\[IndentingNewLine]]; \
\[IndentingNewLine]If[Length[FileNames[filename]] \[NotEqual] 0, 
            Get[package]]\[IndentingNewLine]]; \[IndentingNewLine]contentsTop \
= "\<BeginPackage[\"\>" <> package <> "\<\"\>" <> 
            If[MatchQ[needs, {__String}], "\<, \>" <> 
                ToString[needs, 
                  InputForm], "\<\>"] <> "\<]\>" <> "\<\n\>"\
\[IndentingNewLine] <> "\<Message[\>" <> message <> "\<,\"\>" <> 
            package <> "\<\"]\>" <> "\<\n\>"\[IndentingNewLine] <> 
            extraPackageCode <> "\<\n\>"\[IndentingNewLine] <> \
"\<Begin[\"`Private`\"]\>" <> "\<\n\>"\[IndentingNewLine] <> 
            extraPrivateCode <> "\<\n\>"; \[IndentingNewLine]contentsBottom = \
"\<End[]\n\>" <> "\<EndPackage[]\>"; \[IndentingNewLine]If[
          Length[FileNames[filename]] \[NotEqual] 0, 
          DeleteFile[filename]]; \[IndentingNewLine]If[
          useGzip \[And] 
            Length[FileNames[filename <> "\<.gz\>"]] \[NotEqual] 0, 
          DeleteFile[filename <> "\<.gz\>"]]; \[IndentingNewLine]WriteString[
          filename, 
          contentsTop]; \[IndentingNewLine]\(\((Function[{rule}, 
                  WriteRule[filename, 
                    rule]] /@ \((MatchingValues @@ #)\))\) &\) /@ 
          patterns; \[IndentingNewLine]WriteString[filename, 
          contentsBottom]; \[IndentingNewLine]Close[
          filename]; \[IndentingNewLine]If[useGzip, SetDirectory[directory]; 
          Run["\<gzip \>" <> Last[fullPackagePath] <> "\<.m\>"]; 
          ResetDirectory[]]; \[IndentingNewLine]ResetDirectory[];]\)}], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageMatrixPresentations[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]MatrixPresentation, \
\(\(MatrixPresentation[\[CapitalGamma]\_n]\)[_]\)[\(Irrep[\[CapitalGamma]\_n]\
\)[_], FundamentalBasis, _], \[IndentingNewLine]{ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<MatrixPresentations\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", "\<QuantumGroups`Algebra`\>"}, \
\[IndentingNewLine]"\<ExtraPrivateCode\>" \[Rule] "\<q=Global`q;\>", \
"\<UseGzip\>" \[Rule] False\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageDecompositionMaps[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]{{DecompositionMap, 
            DecompositionMap[\[CapitalGamma]\_n, _, _]}, \
{InverseDecompositionMap, 
            HoldPattern[
              InverseDecompositionMap[\[CapitalGamma]\_n, _, _]]}}, \
\[IndentingNewLine]{ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<DecompositionMaps\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>", "\<QuantumGroups`RepresentationTensors`\
\>", "\<QuantumGroups`MatrixPresentations`\>"}, \
\[IndentingNewLine]"\<ExtraPrivateCode\>" \[Rule] "\<q=Global`q;\>", \
"\<UseGzip\>" \[Rule] False\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageQuantumRoots[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]ExpandQuantumRoot, \(ExpandQuantumRoot[\
\[CapitalGamma]\_n]\)[_], \[IndentingNewLine]{ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<QuantumRoots\>"}, \[IndentingNewLine]"\<Needs\>" \[Rule] \
{"\<QuantumGroups`\>", "\<QuantumGroups`QuantumRoots`\>", \
"\<QuantumGroups`Algebra`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\>" \
\[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageRMatrix[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]RMatrix, 
        RMatrix[\[CapitalGamma]\_n, _, _, _, _], \
\[IndentingNewLine]{ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<RMatrix\>"}, \[IndentingNewLine]"\<Needs\>" \[Rule] \
{"\<QuantumGroups`\>", "\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>", "\<UseGzip\>" \[Rule] 
          False\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackagePartialRMatrixPresentation[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]QuantumGroups`RMatrix`Private`\
PartialRMatrixPresentation, 
        QuantumGroups`RMatrix`Private`PartialRMatrixPresentation[\
\[CapitalGamma]\_n, __], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<PartialRMatrixPresentation\>"}, \
\[IndentingNewLine]"\<Needs\>" \[Rule] {"\<QuantumGroups`\>", \
"\<QuantumGroups`MatrixPresentations`\>", "\<QuantumGroups`RMatrix`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageDirectSumDecompositions[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]QuantumGroups`MatrixPresentations`\
Private`DirectSumDecomposition, \
\(QuantumGroups`MatrixPresentations`Private`DirectSumDecomposition[\
\[CapitalGamma]\_n]\)[__], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<DirectSumDecompositions\>"}, \[IndentingNewLine]"\<Needs\
\>" \[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageSubIrrepWeightBases[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]QuantumGroups`MatrixPresentations`\
Private`SubIrrepWeightBasis, \
\(QuantumGroups`MatrixPresentations`Private`SubIrrepWeightBasis[\
\[CapitalGamma]\_n]\)[__], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<SubIrrepWeightBases\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageBraidingMaps[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]{{NormalisedBraidingMap, 
            NormalisedBraidingMap[\[CapitalGamma]\_n, _, _]}, \
{InverseNormalisedBraidingMap, 
            InverseNormalisedBraidingMap[\[CapitalGamma]\_n, _, _]}}, \
\[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<BraidingMaps\>"}, \[IndentingNewLine]"\<Needs\>" \[Rule] \
{"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`RepresentationTensors`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageBRPresentations[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]KnotTheory`BR, \(KnotTheory`BR[_, _]\)[\
\[CapitalGamma]\_n, __], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<BRPresentations\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`RepresentationTensors`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageHighWeightVectors[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]HighWeightVectors, \(HighWeightVectors[\
\[CapitalGamma]\_n]\)[__], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<HighWeightVectors\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(PackageBraidingMatrices[\[CapitalGamma]_\_n_] := 
      PackageData[\[IndentingNewLine]QuantumGroups`Braiding`Private`\
BraidingMatrices, \(QuantumGroups`Braiding`Private`BraidingMatrices[\
\[CapitalGamma]\_n]\)[__], \[IndentingNewLine]{"\<tmp\>", 
          ToString[\[CapitalGamma]] <> 
            ToString[
              n], "\<BraidingMatrices\>"}, \[IndentingNewLine]"\<Needs\>" \
\[Rule] {"\<QuantumGroups`\>", "\<QuantumGroups`Braiding`\>", \
"\<QuantumGroups`MatrixPresentations`\>", \
"\<QuantumGroups`Utilities`MatrixWrapper`\>", \
"\<QuantumGroups`Representations`\>"}, \[IndentingNewLine]"\<ExtraPrivateCode\
\>" \[Rule] "\<q=Global`q;\>"\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(\(Unprotect[Get];\)\), "\n", 
    \(Get[
        package_String /; 
          StringMatchQ[package, "\<QuantumGroups`Data`\>" ~~ __]] := 
      Get[StringDrop[package, 
          StringLength["\<QuantumGroups`Data`\>"]]]\), "\n", 
    \(\(Protect[Get];\)\)}], "Input"],

Cell["Deprecated:", "Text"],

Cell[BoxData[{
    \(\(Unprotect[Get];\)\), "\[IndentingNewLine]", 
    \(\(useGetGzipHack = True;\)\), "\[IndentingNewLine]", 
    \(Get[
        package_String /; \((useGetGzipHack \[And] 
              StringMatchQ[package, "\<QuantumGroups`Data`\>" ~~ __])\)] := 
      Module[{packageFragments, directory, filename, 
          gzipExists = False}, \[IndentingNewLine]packageFragments = 
          StringSplit[package, "\<`\>"]; \[IndentingNewLine]SetDirectory[
          QuantumGroupsDirectory[]]; \[IndentingNewLine]directory = 
          ToFileName[Most[packageFragments]]; \[IndentingNewLine]filename = 
          Last[packageFragments] <> "\<.m\>"; \[IndentingNewLine]If[
          Length[FileNames[filename <> "\<.gz\>", {directory}]] \[NotEqual] 
            0, \[IndentingNewLine]gzipExists = 
            True; \[IndentingNewLine]SetDirectory[
            directory]; \[IndentingNewLine]Run["\<gzip -d \>" <> 
              filename <> "\<.gz\>"]; \[IndentingNewLine]ResetDirectory[]\
\[IndentingNewLine]]; \[IndentingNewLine]useGetGzipHack = 
          False; \[IndentingNewLine]Get[
          package]; \[IndentingNewLine]useGetGzipHack = 
          True; \[IndentingNewLine]If[
          gzipExists, \[IndentingNewLine]SetDirectory[
            directory]; \[IndentingNewLine]Run["\<gzip \>" <> 
              filename]; \[IndentingNewLine]ResetDirectory[];\
\[IndentingNewLine]]\[IndentingNewLine]]\), "\[IndentingNewLine]", 
    \(\(Protect[Get];\)\)}], "Input"],

Cell[BoxData[
    \(\(End[];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(EndPackage[];\)\)], "Input",
  InitializationCell->True]
},
FrontEndVersion->"5.2 for Microsoft Windows",
ScreenRectangle->{{0, 1280}, {0, 713}},
AutoGeneratedPackage->Automatic,
WindowSize->{1272, 679},
WindowMargins->{{1296, Automatic}, {Automatic, 64}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{
Cell[1754, 51, 350, 6, 50, "Input",
  InitializationCell->True],
Cell[2107, 59, 123, 3, 30, "Input",
  InitializationCell->True],
Cell[2233, 64, 393, 7, 50, "Input",
  InitializationCell->True],
Cell[2629, 73, 88, 2, 30, "Input",
  InitializationCell->True],
Cell[2720, 77, 258, 6, 30, "Input",
  InitializationCell->True],
Cell[2981, 85, 314, 7, 30, "Input",
  InitializationCell->True],
Cell[3298, 94, 376, 9, 50, "Input",
  InitializationCell->True],
Cell[3677, 105, 186, 4, 30, "Input",
  InitializationCell->True],
Cell[3866, 111, 528, 11, 90, "Input",
  InitializationCell->True],
Cell[4397, 124, 2266, 37, 390, "Input",
  InitializationCell->True],
Cell[6666, 163, 4740, 83, 830, "Input",
  InitializationCell->True],
Cell[11409, 248, 704, 11, 134, "Input",
  InitializationCell->True],
Cell[12116, 261, 826, 15, 154, "Input",
  InitializationCell->True],
Cell[12945, 278, 543, 9, 134, "Input",
  InitializationCell->True],
Cell[13491, 289, 586, 11, 134, "Input",
  InitializationCell->True],
Cell[14080, 302, 774, 14, 154, "Input",
  InitializationCell->True],
Cell[14857, 318, 749, 13, 134, "Input",
  InitializationCell->True],
Cell[15609, 333, 735, 13, 134, "Input",
  InitializationCell->True],
Cell[16347, 348, 801, 15, 154, "Input",
  InitializationCell->True],
Cell[17151, 365, 679, 12, 154, "Input",
  InitializationCell->True],
Cell[17833, 379, 639, 11, 134, "Input",
  InitializationCell->True],
Cell[18475, 392, 732, 13, 154, "Input",
  InitializationCell->True],
Cell[19210, 407, 289, 7, 70, "Input"],
Cell[19502, 416, 27, 0, 33, "Text"],
Cell[19532, 418, 1480, 25, 490, "Input"],
Cell[21015, 445, 71, 2, 30, "Input",
  InitializationCell->True],
Cell[21089, 449, 78, 2, 30, "Input",
  InitializationCell->True]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

